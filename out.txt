import os
import hashlib
import logging
from datetime import datetime
import asyncio
import aiofiles
from concurrent.futures import ThreadPoolExecutor
import psutil
import csv

# Constants and configurations
READ_CHUNK_SIZE = 1048576  # Read chunk size for network files (default: 1MB)
MAX_WORKERS = 20  # Maximum number of worker threads

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def hash_file(file_path, chunk_size=READ_CHUNK_SIZE):
    """Hash file using MD5 algorithm."""
    md5_hash = hashlib.md5()
    try:
        async with aiofiles.open(file_path, "rb") as f:
            while True:
                byte_block = await f.read(chunk_size)
                if not byte_block:
                    break
                md5_hash.update(byte_block)
        return file_path, md5_hash.hexdigest()
    except Exception as e:
        logging.error("Error hashing file %s: %s", file_path, e)
        return file_path, None

async def process_files_batch(file_paths, chunk_size=READ_CHUNK_SIZE):
    """Process batch of files and return their hashes."""
    loop = asyncio.get_event_loop()
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        tasks = [loop.run_in_executor(executor, hash_file, file_path, chunk_size) for file_path in file_paths]
        return await asyncio.gather(*tasks)

async def hash_files_in_folder(folder, chunk_size=READ_CHUNK_SIZE):
    """Hash files in specified folder asynchronously."""
    start_time = datetime.now()
    processed_count = 0
    file_paths = []

    # Collect file paths in the folder
    for root, dirs, files in os.walk(folder):
        for file in files:
            file_path = os.path.join(root, file)
            file_paths.append(file_path)
            processed_count += 1

    # Process files in batches asynchronously
    results = await process_files_batch(file_paths, chunk_size)

    # Log elapsed time
    elapsed_time = datetime.now() - start_time
    logging.info(f"Elapsed Time: {elapsed_time}")

    return results

def main():
    """Main function to orchestrate file hashing process."""
    logging.info("Program started.")
    start_time = datetime.now()

    # Prompt user for input
    source_folder = input("Enter the source folder containing the files to hash: ")

    # Hash files in the folder asynchronously
    asyncio.run(hash_files_in_folder(source_folder))

    # Log processing time
    end_time = datetime.now()
    processing_time = end_time - start_time
    logging.info("Program finished. Processing time: %s", processing_time)

if __name__ == "__main__":
    main()
